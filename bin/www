#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('imbutler:server');
var http = require('http');
var common = require('../routes/common');

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || '80';
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 80);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = require('socket.io')(server);
var firebase = require('../config/firebase_config');
const { common_ } = require('protobufjs');

var users = new Array();

io.on('connection', (socket)=>{
  users.push(socket);
  console.log(`[CHAT] user connected('${socket.handshake.query.username}'@'${socket.id}' : '${socket.handshake.query.to}')`);

  socket.on('message_all', (data) => { //전체 채팅
    io.emit('message_all', data);
    console.log(`[CHAT] message all : ${JSON.stringify(data)}`);
  });
  socket.on('message', (data) => { //1:1 채팅
    users.filter(user =>
      (user.handshake.query.username == data.from && user.handshake.query.to == data.to) ||
      (user.handshake.query.username == data.to && user.handshake.query.to == data.from))
      .forEach((socket_, index, array) => {
        io.to(socket_.id).emit('message', data);
      }); //접속된 모든 플랫폼에 전송(Socket.io)
    
    common.getTokens(data.to, (tokens) => {
      users.filter(user => user.handshake.query.username == data.to && user.handshake.query.to == data.from)
      .forEach((socket_, index, array) => {
        tokens = tokens.filter(token => token != socket_.handshake.query.token);
      });

      firebase.fcm_msg(
        data.from,
        data.msg,
        tokens
      );
    });

    console.log(`[CHAT] message : ${JSON.stringify(data)}`);
  });
  socket.on('disconnect', async () => {
    users = users.filter(user => user != socket);
    console.log(`[CHAT] user disconnected(${socket.handshake.query.username})`);
  });
});